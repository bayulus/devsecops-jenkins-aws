pipeline {
  agent any
  tools { 
        maven 'Maven_3_5_2'  
    }
  environment {
    SONAR_TOKEN = credentials('SONAR_TOKEN')
  }

  //SONAR ANALYSIS FOR SAST SCAN
  stages{
    stage('CompileandRunSonarAnalysis') {
            steps {	
		sh 'mvn clean verify sonar:sonar -Dsonar.projectKey=devsecopsjenkins -Dsonar.organization=devsecopsjenkins -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${SONAR_TOKEN}'
			}
    }

     //SYNK ANALYSIS FOR SCS SCAN
	  stage('RunSCAAnalysisUsingSnyk') {
            steps {		
				withCredentials([string(credentialsId: 'SNYK_TOKEN', variable: 'SNYK_TOKEN')]) {
					sh 'mvn snyk:test -fn'
				}
			}
    }


    //building the image
    stage('Build') { 
            steps { 
               withDockerRegistry([credentialsId: "dockerlogin", url: ""]) {
                 script{
                 app =  docker.build("easy")
            }
        }
      }
    }

    //push
	  stage('Push') {
            steps {
                script{
                    docker.withRegistry('https://528773513133.dkr.ecr.eu-west-2.amazonaws.com', 'ecr:eu-west-2:aws-credentials') {
                    app.push("latest")
            }
          }
       }
    }

    stage('Kubernetes Deployment of EasyBuggy Web Application') {
	   steps {
	      withKubeConfig([credentialsId: 'kubelogin']) {
		  sh('kubectl delete all --all -n devsecops')
		  sh ('kubectl apply -f deployment.yaml --namespace=devsecops')
		    }
	    }
   	}

    stage ('wait_for_testing'){
	   steps {
		   sh 'pwd; sleep 180; echo "Application Has been deployed on K8S"'
	   	}
	   }
	   
	  stage('RunDASTUsingZAP') {
        steps {
		    withKubeConfig([credentialsId: 'kubelogin']) {
				sh('zap.sh -cmd -quickurl http://$(kubectl get services/easybuggy --namespace=devsecops -o json| jq -r ".status.loadBalancer.ingress[] | .hostname") -quickprogress -quickout ${WORKSPACE}/zap_report.html')
				archiveArtifacts artifacts: 'zap_report.html'
		    }
	     }
     } 

  }
}
